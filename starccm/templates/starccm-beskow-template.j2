{% extends "starccm-generic-template.j2" %}
# Submit script intended for "old" Beskow with 32 cores per node
#
# To connect to a running STAR-CCM+ simulation do the following:
# 1. Start STAR-CCM+ through the command:
#    starccm+ -mesa -arch linux-x86_64-2.12
# 2. Choose "Connect to server"
# 3. Read server information from starccmRun.jobid.log file on line
#    Server::start -host nid01577:47827
# Note: Use matching versions of STAR-CCM+ when connecting"!


################## User defined variables #####################
{% block sbatch %}
# Use Scania CAC
#SBATCH -A scania

# License requisition
#SBATCH --license=scania_ccmppower:1

# Enable modules within the batch system
. /opt/modules/default/etc/modules.sh
module use /cfs/scania/software/modules
{% endblock sbatch %}

# Constraints to enforce Scania-Beskow hardware
#SBATCH --constraint="Haswell" # 64GB, 32 cores/node
#SBATCH --partition="2d4-512"

# OR
#SBATCH --constraint="Broadwell" # 128GB, 36 cores/node

{% block license %}
# Define license server
# export CDLMD_LICENSE_FILE=1999@flex.cd-adapco.com
export CDLMD_LICENSE_FILE=31411@license-1.pdc.kth.se
{% endblock license %}





############### End of User defined variables #################

{% block execution %}
# Fetch first letter in username
LETTER=${USER:0:1}

#LUSTRE_ROOT=/cfs/klemming/nobackup/$LETTER/$USER/StarCCM_config
#LUSTRE_ROOT=/cfs/milner/scratch/$LETTER/$USER/StarCCM_config
LUSTRE_ROOT=/cfs/scania/scratch/$LETTER/${USER}/StarCCM_config

# Set the temporary path
#export TMPDIR=/cfs/klemming/nobackup/$LETTER/$USER
#export TMPDIR=/cfs/milner/scratch/$LETTER/$USER
export TMPDIR=/cfs/scania/scratch/$LETTER/$USER

EXTRA_FLAGS="
{%- if data.workflow in ["PostMeshNode","PostComputeNode"] %}-noexit {% endif -%}
"
# Define executable using the Power-On-Demand (POD) license server at Siemens
#starccm+ -power -np $SLURM_NTASKS -batch $STARTMACRO -collab -pio -mpidriver crayxt -nbuserdir $LUSTRE_ROOT -arch linux-x86_64-2.5  -podkey TODO -licpath 1999@flex.cd-adapco.com $EXTRA_FLAGS $SIM_FILE &>> $LOGFILE

# Define executable using the PDC license server according to CDLMD_LICENSE_FILE definition
# Note that version 12.06 requires -arch linux-x86_64-2.5
starccm+ -power -np $SLURM_NTASKS -batch $STARTMACRO -collab -pio -mpidriver crayxt -nbuserdir $LUSTRE_ROOT -arch linux-x86_64-2.12 $EXTRA_FLAGS $SIM_FILE &>> $LOGFILE


# Shell commands to circumvent problem of stopping a simulation interactively without removing it from the cluster. NOTE! The job has to be removed manually once it has finished, otherwise it will continue until sleep command has finished.
# Open questions:
# 1. Does sleep time start counting as soon as queuing starts?
# 2. Disconnect operation seems to kill the simulation and should be avoided. Needs to be verified.
# sleep 2d
# wait
{% endblock execution %}
