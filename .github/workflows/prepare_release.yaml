name: 'PrepareRelease'
on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release (optional)
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    name: "Run craft prepare"
    steps:
      - uses: actions/checkout@v2

      - id: extract_branch
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - id: set-env
        run: |
          echo 'RELEASE_VERSION=${{ github.event.inputs.version }}' >> $GITHUB_ENV;
          echo 'GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}' >> $GITHUB_ENV;
          echo 'GITHUB_REF=${{ steps.extract_branch.outputs.branch }}' >> $GITHUB_ENV;

      - id: set-git-user
        run: |
          git config user.name omnivector-qa
          git config user.email admin@omnivector.solutions

      - uses: getsentry/craft@0.25.3
        name: "Craft Prepare"
        with:
          action: prepare
          version: ${{ env.RELEASE_VERSION }}
        env:
          GIT_COMMITTER_NAME: omnivector-qa
          GIT_AUTHOR_NAME: omnivector-qa
          EMAIL: admin@omnivector.solutions

  build:
    runs-on: ubuntu-latest
    name: "Build artifacts for the release"
    needs: [prepare]
    steps:
      - id: set-version
        run: |
          echo 'RELEASE_VERSION=${{ github.event.inputs.version }}' >> $GITHUB_ENV;
          echo 'RELEASE_PREFIX=jobbergate-cli-${{ github.event.inputs.version }}' >> $GITHUB_ENV;

      - uses: actions/checkout@v2
        with:
          ref: release/${{ env.RELEASE_VERSION }}

      - id: set-git-user
        run: |
          git config user.name omnivector-qa
          git config user.email admin@omnivector.solutions

      - name: "tar it up"
        run: |
          git ls-tree --name-only -z HEAD \
            | tar --transform 's,^,${{ env.RELEASE_PREFIX }}/,' --null -T- -cvz -f ${{ env.RELEASE_PREFIX }}.tar.gz

      - name: "Parse and store git_sha, release_version"
        if: ${{ success() }}
        id: vars
        shell: bash
        run: |
          echo "::set-output name=release_version::$(echo $(git branch | grep '*' | awk '{print $2}') | sed 's/[a-z-]*\///g')"
          echo "::set-output name=tarball::$(echo ${{ env.RELEASE_PREFIX }}.tar.gz)"
          echo "::set-output name=git_sha::$(git rev-parse HEAD)"

      - name: Archive Artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.vars.outputs.git_sha }}
          path: |
            ${{ steps.vars.outputs.tarball }}

      - uses: Sibz/github-status-action@v1
        if: ${{ success() }}
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: 'ReleaseAction'
          description: 'Passed'
          state: 'success'
          sha: ${{ steps.vars.outputs.git_sha }}

##      - uses: 8398a7/action-slack@v3
##        with:
##          status: ${{ job.status }}
##          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
##        env:
##          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
##        if: always() # Pick up events even if the job fails or is canceled.
##
